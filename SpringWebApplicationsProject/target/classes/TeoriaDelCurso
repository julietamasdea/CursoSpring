//////
Hibernate - acceso a datos
    Como acceder a datos almacenados en base de datos
    lo vamos a hacer usando hibernate
    Hibernate:
        Que es: Es un framework que facilita los accesos a las BD desde apps java
        Nhibernate sirve para .net
        Permite leer actualizar y eliminar la info de la BD de una manera simplificada
        Utiliza ORM para el acceso de datos:
            ORM(Mapa de objeto relacional) convierte las tablas en entidades -> utiliza el concepto de POO para acceder a las BD, para ello transforma las tablas en entidades con propiedades
        Ventajas:
            Permite olvidarnos del lenguaje SQL
            Minimiza el codigo JDBC de acceso a datos
            Abstrae del codigo SQL
            Proporciona seguridad adicional contra ataque a datos
            Automatiza tareas CRUD (ABM)

    Â¿Como funciona un framework ORM a la hora de mapear datos?
    Tenemos una clase en la cual queremos guardar clientes (ejemplo con nombre, apellido, telefono), hibernate lo que hace gracias a ORM, e interpreta que cada uno de los atributos corresponde a un campo de una tabla de la BD, y ademas las transacciones que podemos realizar entre nuestra app y la tabla, son de manera automatica sin tener que hacer sentencias SQL.
    Esto lo hace, desde la aplicacion, para insertar un objeto:
        Guardar -> int id = (Integer) session.save(cliente) donde cliente es un objeto de la clase Cliente
        Leer -> Cliente cliente = session.get(Cliente.class, id)

    Requisitos para usar hibernate:
        Tenemos que usar SGBD. En el curso usamos MySQL
        MySql Workbench
        Instalar driver JDBC
        Instalar librerias Hibernate

////conexion de prueba para ver que funcione
    import java.sql.Connection;
    import java.sql.DriverManager;

    public class ConexionJDBC {
        public static void main(String[] args) {
            String jdbcUrl="jdbc:mysql://localhost:3306/proyectohibernate?useSSL=false";
            String usuario="root";
            String password="julietamasdea";
            try {
                System.out.println("Intentando conectar con la BBDD: " + jdbcUrl);
                Connection miconexion = DriverManager.getConnection(jdbcUrl,usuario,password);
                System.out.println("Conexion exitosa");
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }

/////
Archivo de configuracion xml hibernate
    http://www.cursohibernate.es/doku.php?id=unidades:02_hibernate:03_configurando

    Clases necesarias:
    SessionFactory
        Lee el archivo de configuracion
        Crea objetos de tipo Session
    Session
        Conecta con la BBD
        Guarda y muestra objetos del mapeo

    Pasos a seguir:
        Crear sessionfactory
        Crear obj session
        Crear obj (clientes)
        Ejecutar transaccion SQL
            Comienza transaccion
            Guardar obj en BBDD
                Commit
                Rollback

//////GeneracionDeCamposClaves
Generacion de campos claves
    Usamos una notacion: @GeneratedValue
        4 formas diferentes: (generalmente se usa identity con mysql)
            Auto -> Hibernate elige la key dependiendo la estructura de la tabla
            Identity -> La crea basando en si nuestra tabla hay un valor que sea autoincremental
            Sequence -> Que genera datos random (para mysql no es valido)
            Table -> almacena la secuencia de la BD
    EJemplo con identity, en la clase cliente:
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY) //GeneracionDeCamposClaves
    @Column(name="id")
    private int id;

//////
Hibernate -> ConsultaSelect
    Estas consultas se hacen con HQL
    https://docs.jboss.org/hibernate/core/3.3/reference/en/html/queryhql.html
    https://www.tutorialspoint.com/hibernate/hibernate_query_language.htm

//////
Update&Delete
