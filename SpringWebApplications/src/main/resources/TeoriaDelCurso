Aplicaciones Web
    MVC= modelo vista controlador
        Es un patron de diseño a la hora de crear aplicaciones web que siguen casi todos los frameworks
        Este patron de diseño consiste en dividir nuestras aplicaciones en tres partes:
            Controlador ->
            Modelo ->
            Vista ->
        El usuario hace una peticion (ejemplo un viaje en un hotel, o un vuelo), esa peticion la toma el controlador. El controlador la procesa y necesita contactar con el modelo, el modelo es donde se almacenan los datos (vuelos, fechas, etc, generalmente se usa una base de datos para esto) luego, el modelo le proporciona la informacion
        Una vez que el controlador tiene la informacion necesaria, se la envia a la vista, la vista es la pagina web. Una vez que esa infromacion esta en la vista, el usuario ve la respuesta
        Ventajas del MVC
            Favorece el desarrollo
            Favorece el mantenimiento
            Favorece la depuracion
            Favorece la escalabilidad
        El controlador corresponde a un servlet --> en spring hay diferentes formas de construirlo
        La vista generalmente se construye con JSP
        El modelo casi siempre corresponde a una BD, pero no necesariamente tiene que ser una BD, pueden estar en un fichero. Pueden estar en cualquier contenedor de datos.
            Podemos agregar informacion de BBDD; objetos de java(String, date, colleciones) para agregar info al modelo, vamos a usar la interfaz
            Model, que tiene un metodo sobrecargado, que es el "addAttribute()"
            en https://docs.spring.io/spring-framework/docs/current/javadoc-api/ model
    Los errores que tuve los arregle agregando esto al pom, y cambiandole para que coincida con la release de spring que tiene el netbeans
    <dependency>
        <groupId>org.springframework</groupId>
        <artifactId>spring-webmvc</artifactId>
        <version>4.3.25.RELEASE</version>
    </dependency>
////////
Peticion desde formulario y obtener respuesta del servidor:
    Vista -> suele ser un doc jsp o html, realiza una peticion url que pasa por el controlador antes de llegar al servidor
    Controlador
    Servidor -> proporciona el documento que se quiere ver, procesa y devuelve una respuesta al controlador y luego llega a la vista

///////
Agregar contenido estatico:
    En el archivo de configuracion del servlet spring_mvc_servlet.xml es donde se le indica al proyecto donde estara el contenido estatico o externo
    Imagenes
    Css
    Hoja externa de javascript, o lo que sea

//////
Archivos WAR -> empaquetados para aplicaciones JEE
	Asegurarse que el servidor esta detenido
	Elegir la opcion de exportar a un archivo war
Levantar servidor
En al ruta de glassfish: C:\AppServers\glassfish-5.0.1\glassfish5\glassfish\bin>
ejecutar el comando: asadmin deploy C:\Users\julieta.masdea\Desktop\SpringWebApplications-1.0.war
despues en la url:  http://localhost:8080/SpringWebApplications-1.0/