Aplicaciones Web
    MVC= modelo vista controlador
        Es un patron de diseño a la hora de crear aplicaciones web que siguen casi todos los frameworks
        Este patron de diseño consiste en dividir nuestras aplicaciones en tres partes:
            Controlador ->
            Modelo ->
            Vista ->
        El usuario hace una peticion (ejemplo un viaje en un hotel, o un vuelo), esa peticion la toma el controlador. El controlador la procesa y necesita contactar con el modelo, el modelo es donde se almacenan los datos (vuelos, fechas, etc, generalmente se usa una base de datos para esto) luego, el modelo le proporciona la informacion
        Una vez que el controlador tiene la informacion necesaria, se la envia a la vista, la vista es la pagina web. Una vez que esa infromacion esta en la vista, el usuario ve la respuesta
        Ventajas del MVC
            Favorece el desarrollo
            Favorece el mantenimiento
            Favorece la depuracion
            Favorece la escalabilidad
        El controlador corresponde a un servlet --> en spring hay diferentes formas de construirlo
        La vista generalmente se construye con JSP
        El modelo casi siempre corresponde a una BD, pero no necesariamente tiene que ser una BD, pueden estar en un fichero. Pueden estar en cualquier contenedor de datos.
            Podemos agregar informacion de BBDD; objetos de java(String, date, colleciones) para agregar info al modelo, vamos a usar la interfaz
            Model, que tiene un metodo sobrecargado, que es el "addAttribute()"
            en https://docs.spring.io/spring-framework/docs/current/javadoc-api/ model
    Los errores que tuve los arregle agregando esto al pom, y cambiandole para que coincida con la release de spring que tiene el netbeans
    <dependency>
        <groupId>org.springframework</groupId>
        <artifactId>spring-webmvc</artifactId>
        <version>4.3.25.RELEASE</version>
    </dependency>
////////
Peticion desde formulario y obtener respuesta del servidor:
    Vista -> suele ser un doc jsp o html, realiza una peticion url que pasa por el controlador antes de llegar al servidor
    Controlador
    Servidor -> proporciona el documento que se quiere ver, procesa y devuelve una respuesta al controlador y luego llega a la vista

///////
Agregar contenido estatico:
    En el archivo de configuracion del servlet spring_mvc_servlet.xml es donde se le indica al proyecto donde estara el contenido estatico o externo
    Imagenes
    Css
    Hoja externa de javascript, o lo que sea

//////
Archivos WAR -> empaquetados para aplicaciones JEE
	Asegurarse que el servidor esta detenido
	Elegir la opcion de exportar a un archivo war
Levantar servidor
En al ruta de glassfish: C:\AppServers\glassfish-5.0.1\glassfish5\glassfish\bin>
ejecutar el comando: asadmin deploy C:\Users\julieta.masdea\Desktop\SpringWebApplications-1.0.war
despues en la url:  http://localhost:8080/SpringWebApplications-1.0/


/////
@RequestParam nos facilita el trabajo de rescatar en un metodo parametros que hacemos con un request

////
@RequestMapping
Conflictos que pueden aparecer cuando usamos los request mapping
    Actualmente tenemos dos controladores:
       AlumnoController -> muestra el formulario, y los procesadores del formulario
       Controlador -> muestra la pagina de inicio, la raiz del proyecto
Para todas estas rutas usamos @RequestMapping, si el proyecto es complejo, seguramente tenga mas de dos controladores
Por ejemplo, tenemos otro controlador que tiene una ruta igual a la de alumnocontroller, aca vamos a tener un problema con la ruta porque no va a ser unica,
Spring no vs a saber a que ruta va a acceder
En estos casos se pueden establecer rutas relativas --> esto lo hacemos agregando arriba de la clase del controlador, la linea
@RequestMapping("v1")

/////
Form MVC tags
https://docs.spring.io/spring-framework/docs/3.2.x/spring-framework-reference/html/view.html

    Vista 1- Va a haber un formulario donde los alumnos se van a registrar (aca usamos  Form MVC tags)
    Vista 2- Alumno confirmado (JSP tags)
    Clase alumno para objetos
    Controlador que gestione todo esto

    Form MVC tags -> son etiquetas reutilizables que construyen bloques HTML. Sirven de puente (data-binding) capaces de enviar y recibir informacion de objetos java (beans) desde codigo html
    JSP tags - > librerias de etiquetas con apariencia similar a xml utilizadas en paginas JSP. Hacen mas facil la programacion lectura y modificacion de paginas dinamicas
        No son prescindibles pero si son recomendables
        Ventajas:
            - separan el codigo java del HTML
            - Minimizan el codigo en la pagina web
            - Hacen el codigo dinamico reutilizable

    Menus desplegables y selecciones multiples
        para seleccion simple --> <form:select path="asignaturaOptativa">
        para seleccion multiple --> <form:select path="asignaturaOptativa" multiple="true">

    RadioButtons Radio Buttons
            <td>Genero</td>
            <td>Hombre: <form:radiobutton path="genero" value="H"/> <br/>
                Mujer: <form:radiobutton path="genero" value="M"/> </td>
            </tr>
    Checkboxes
        <td>
            <%-- Approach 2: Property is of an array or of type java.util.Collection --%>
            Voley: <form:checkbox path="deporte" value="Voley"/>
            Basquet: <form:checkbox path="deporte" value="Basquet"/>
            HandBall: <form:checkbox path="deporte" value="HandBall"/>

        </td>

Validacion de formularios
    1) Agregar las librerias de validacion -> Bean validation siguiendo el standard JSR 380
        Estas librerias se pueden obtener mediante hibernate validation
    2) especificar propiedades a validar en la clase correspondiente
    3) Especificar validacion en contenedor
    4) Especificar mensaje de validacion en formulario de registro

    link donde esta lo que hay que agregar al pom: https://www.baeldung.com/javax-validation
    Tambien en el link hay ejemplos de validaciones
	<dependency>
        <groupId>org.hibernate.validator</groupId>
        <artifactId>hibernate-validator</artifactId>
        <version>6.0.13.Final</version>
    </dependency>

    Aclaracion: el problema de las validaciones de html5, es que se hacen del lado del cliente por lo que podrian quitarse desde el navegador. Lo mas seguro es hacerlo del lado del servidor

    Para validar los espacios en blanco se puede usar:
    @InitBinder
         Comprueba la peticion al controlador antes de que llegue a este
         Se aplica la anotacion a un metodo que sera el encargado de procesar previamente la peticion
         Se ejecuta el metodo
         Se ejecuta el resto de la peticion si no hay espacios en blanco
    StringTrimmerEditor
    Uso:
    @InitBinder
    public void miBinder(WebDataBinder webDataBinder) {
        StringTrimmerEditor stringTrimmerEditor = new StringTrimmerEditor(true);
        webDataBinder.registerCustomEditor(String.class, stringTrimmerEditor);
    }

///////
    Expresiones regulares
        Son patrones de busqueda que nos van a permitir encontrar cadenas comparandolas entre ellas o buscando secuencias numericas o hacer que un string cumpla determinadas reglas
        Class Pattern para expresiones regulares
        docs.oracle.com/javase/tutorial/essential/regex/char_classes.html